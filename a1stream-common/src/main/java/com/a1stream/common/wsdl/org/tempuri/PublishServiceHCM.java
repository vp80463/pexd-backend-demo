
package com.a1stream.common.wsdl.org.tempuri;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;


/**
 * This class was generated by the JAX-WS RI.
 *
 * @author dong zhen
 */
@WebServiceClient(name = "PublishService", targetNamespace = "http://tempuri.org/", wsdlLocation = "classpath:wsdl/publishserviceHCM.wsdl")
public class PublishServiceHCM extends Service {

    private static final URL PUBLISHSERVICE_WSDL_LOCATION;
    private static final Logger logger = Logger.getLogger(com.a1stream.common.wsdl.org.tempuri.PublishServiceHCM.class.getName());

    static {
        URL url = null;
        try {
//            URL baseUrl;
//            baseUrl = com.a1stream.web.app.wsdl.org.tempuri.PublishServiceHCM.class.getResource(".");
//            url = new URL(baseUrl, "file:/usr/local/wildfly-9.0.2.Final/publishserviceHCM.wsdl");
            url = PublishServiceDN.class.getClassLoader().getResource("wsdl/publishserviceHCM.wsdl");
            if (url == null) {
                throw new MalformedURLException("WSDL file not found in classpath");
            }
        } catch (MalformedURLException e) {
           logger.warning("Failed to create URL for the wsdl Location: 'classpath:wsdl/publishserviceHCM.wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        PUBLISHSERVICE_WSDL_LOCATION = url;
    }

    public PublishServiceHCM(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PublishServiceHCM() {
        super(PUBLISHSERVICE_WSDL_LOCATION, new QName("http://tempuri.org/", "PublishService"));
    }

    /**
     * 
     * @return
     *     returns PublishServiceSoap
     */
    @WebEndpoint(name = "PublishServiceSoap")
    public PublishServiceSoap getPublishServiceSoap() {
        return super.getPort(new QName("http://tempuri.org/", "PublishServiceSoap"), PublishServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PublishServiceSoap
     */
    @WebEndpoint(name = "PublishServiceSoap")
    public PublishServiceSoap getPublishServiceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "PublishServiceSoap"), PublishServiceSoap.class, features);
    }

}
